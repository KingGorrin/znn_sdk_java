package network.zenon.embedded;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.IOException;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import network.zenon.abi.Abi;
import network.zenon.model.primitives.Address;
import network.zenon.model.primitives.Hash;
import network.zenon.model.primitives.TokenStandard;
import network.zenon.utils.BytesUtils;

public class DefinitionsTest {
    private static Stream<Arguments> functionValidTestData() throws IOException {
        final Address ADDRESS = Address.parse("z1qq0hffeyj0htmnr4gc6grd8zmqfvwzgrydt402");
        final Hash HASH = Hash.parse("05a0fef85008e63f0680b68d11743ba5caf199994d642590febe570b2a84b612");

        return Stream.of(
                // Common functions
                Arguments.of(Definitions.COMMON, "CollectReward", new Object[0], BytesUtils.fromHexString("AF43D3F0")),
                Arguments.of(Definitions.COMMON, "DepositQsr", new Object[0], BytesUtils.fromHexString("D49577F4")),
                Arguments.of(Definitions.COMMON, "WithdrawQsr", new Object[0], BytesUtils.fromHexString("B3D658FD")),
                // Spork functions
                Arguments.of(Definitions.SPORK, "CreateSpork",
                        new Object[] { "TestSpork", "This is a test spork" },
                        BytesUtils.fromHexString(
                                "b602e3110000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000095465737453706f726b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001454686973206973206120746573742073706f726b000000000000000000000000")),
                Arguments.of(Definitions.SPORK, "ActivateSpork",
                        new Object[] { HASH.getBytes() },
                        BytesUtils.fromHexString(
                                "25c54e9605a0fef85008e63f0680b68d11743ba5caf199994d642590febe570b2a84b612")),
                // Htlc functions
                Arguments.of(Definitions.HTLC, "CreateHtlc",
                        new Object[] { ADDRESS, 1668077642L, 0, 32, BytesUtils.fromHexString("de543a6cab8db5bdc086d1720b97b0f097458841cd0264d789350e3b07587f5b") },
                        BytesUtils.fromHexString(
                                "1880e866000000000000000000000000001f74a72493eebdcc75463481b4e2d812c7090300000000000000000000000000000000000000000000000000000000636cd84a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000020de543a6cab8db5bdc086d1720b97b0f097458841cd0264d789350e3b07587f5b")),
                Arguments.of(Definitions.HTLC, "ReclaimHtlc",
                        new Object[] { HASH.getBytes() },
                        BytesUtils.fromHexString(
                                "d8ab94a105a0fef85008e63f0680b68d11743ba5caf199994d642590febe570b2a84b612")),
                Arguments.of(Definitions.HTLC, "UnlockHtlc",
                        new Object[] { HASH.getBytes(), "all your znn belong to us".getBytes() },
                        BytesUtils.fromHexString(
                                "0b247d7105a0fef85008e63f0680b68d11743ba5caf199994d642590febe570b2a84b61200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000019616c6c20796f7572207a6e6e2062656c6f6e6720746f20757300000000000000")),
                // Accelerator functions
                Arguments.of(Definitions.ACCELERATOR, "CreateProject",
                        new Object[] { "TestProject", "Test Project", "", 500, 0 },
                        BytesUtils.fromHexString(

                Arguments.of(Definitions.ACCELERATOR, "AddPhase",
                        new Object[] { HASH.getBytes(), "TestProject", "Test Project", "", 500, 0 },
                        BytesUtils.fromHexString(

                Arguments.of(Definitions.ACCELERATOR, "UpdatePhase",
                        new Object[] { HASH.getBytes(), "TestProject", "Test Project", "", 500, 0 },
                        BytesUtils.fromHexString(

                Arguments.of(Definitions.ACCELERATOR, "Donate", new Object[0], BytesUtils.fromHexString("CB7F8B2A")),
                Arguments.of(Definitions.ACCELERATOR, "VoteByName", new Object[] { HASH.getBytes(), "TestPillar", 10 },
                        BytesUtils.fromHexString(
                                "5C6C106405A0FEF85008E63F0680B68D11743BA5CAF199994D642590FEBE570B2A84B6120000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000A000000000000000000000000000000000000000000000000000000000000000A5465737450696C6C617200000000000000000000000000000000000000000000")),
                Arguments.of(Definitions.ACCELERATOR, "VoteByProdAddress", new Object[] { HASH.getBytes(), 10 },
                        BytesUtils.fromHexString(
                                "90ED001C05A0FEF85008E63F0680B68D11743BA5CAF199994D642590FEBE570B2A84B612000000000000000000000000000000000000000000000000000000000000000A")),
                // Pillar functions
                Arguments.of(Definitions.PILLAR, "Register", new Object[] { "TestPillar", ADDRESS, ADDRESS, 60, 100 },
                        BytesUtils.fromHexString(
                                "644DE92700000000000000000000000000000000000000000000000000000000000000A0000000000000000000000000001F74A72493EEBDCC75463481B4E2D812C70903000000000000000000000000001F74A72493EEBDCC75463481B4E2D812C70903000000000000000000000000000000000000000000000000000000000000003C0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000A5465737450696C6C617200000000000000000000000000000000000000000000")),
                Arguments.of(Definitions.PILLAR, "RegisterLegacy", new Object[] { "TestPillar", ADDRESS, ADDRESS, 50,
                        50, "pPM27W6X3qngoo+wjt5D9BSNrNkLnyHZcmYr+UB8r7A=",
                        "8TMpgC8O/VYhjLxUj2gHK7jcvH+SBELkYixicx5eA5jlxQTpzqohXRv93BkSdtmDAdpvzF1ADtnJo9uF0Gb5DQ==" },
                        BytesUtils.fromHexString(

                Arguments.of(Definitions.PILLAR, "UpdatePillar",
                        new Object[] { "TestPillar", ADDRESS, ADDRESS, 40, 60 },
                        BytesUtils.fromHexString(
                                "DE0AE34B00000000000000000000000000000000000000000000000000000000000000A0000000000000000000000000001F74A72493EEBDCC75463481B4E2D812C70903000000000000000000000000001F74A72493EEBDCC75463481B4E2D812C709030000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000003C000000000000000000000000000000000000000000000000000000000000000A5465737450696C6C617200000000000000000000000000000000000000000000")),
                Arguments.of(Definitions.PILLAR, "Revoke", new Object[] { "TestPillar" }, BytesUtils.fromHexString(
                        "956313060000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000A5465737450696C6C617200000000000000000000000000000000000000000000")),
                Arguments.of(Definitions.PILLAR, "Delegate", new Object[] { "TestPillar" }, BytesUtils.fromHexString(
                        "7C2D5D6E0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000A5465737450696C6C617200000000000000000000000000000000000000000000")),
                Arguments.of(Definitions.PILLAR, "Undelegate", new Object[0], BytesUtils.fromHexString("7E8952C8")),
                // Plasma functions
                Arguments.of(Definitions.PLASMA, "Fuse", new Object[] { ADDRESS },
                        BytesUtils.fromHexString(
                                "5AC942E8000000000000000000000000001F74A72493EEBDCC75463481B4E2D812C70903")),
                Arguments.of(Definitions.PLASMA, "CancelFuse", new Object[] { HASH.getBytes() },
                        BytesUtils.fromHexString(
                                "F9CA9DC305A0FEF85008E63F0680B68D11743BA5CAF199994D642590FEBE570B2A84B612")),
                // Sentinel functions
                Arguments.of(Definitions.SENTINEL, "Register", new Object[0], BytesUtils.fromHexString("4DD23517")),
                Arguments.of(Definitions.SENTINEL, "Revoke", new Object[0], BytesUtils.fromHexString("58363E24")),
                // Stake functions
                Arguments.of(Definitions.STAKE, "Stake", new Object[] { 2592000 },
                        BytesUtils.fromHexString(
                                "D802845A0000000000000000000000000000000000000000000000000000000000278D00")),
                Arguments.of(Definitions.STAKE, "Cancel", new Object[] { HASH.getBytes() },
                        BytesUtils.fromHexString(
                                "5A92FE3205A0FEF85008E63F0680B68D11743BA5CAF199994D642590FEBE570B2A84B612")),
                // Swap functions
                Arguments.of(Definitions.SWAP, "RetrieveAssets", new Object[] {
                        "pPM27W6X3qngoo+wjt5D9BSNrNkLnyHZcmYr+UB8r7A=",
                        "8TMpgC8O/VYhjLxUj2gHK7jcvH+SBELkYixicx5eA5jlxQTpzqohXRv93BkSdtmDAdpvzF1ADtnJo9uF0Gb5DQ==" },
                        BytesUtils.fromHexString(
                                "47F12C81000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000A0000000000000000000000000000000000000000000000000000000000000002C70504D323757365833716E676F6F2B776A7435443942534E724E6B4C6E79485A636D59722B5542387237413D0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005838544D706743384F2F5659686A4C78556A3267484B376A6376482B5342454C6B596978696378356541356A6C785154707A716F685852763933426B5364746D44416470767A46314144746E4A6F3975463047623544513D3D0000000000000000")),
                // Token functions
                Arguments.of(Definitions.TOKEN, "IssueToken",
                        new Object[] { "TestToken", "TST", "www.test.com", 2993292970217428L, 9007199254740991L, 8,
                                true, false, true },
                        BytesUtils.fromHexString(

                Arguments.of(Definitions.TOKEN, "Mint",
                        new Object[] { TokenStandard.ZNN_ZTS, 2993292900217428L, ADDRESS },
                        BytesUtils.fromHexString(
                                "CD70F9BC0000000000000000000000000000000000000000000014E66318C6318C6318C6000000000000000000000000000000000000000000000000000AA2625006B254000000000000000000000000001F74A72493EEBDCC75463481B4E2D812C70903")),
                Arguments.of(Definitions.TOKEN, "Burn", new Object[0], BytesUtils.fromHexString("3395AB94")),
                Arguments.of(Definitions.TOKEN, "UpdateToken",
                        new Object[] { TokenStandard.ZNN_ZTS, ADDRESS, true, true }, BytesUtils.fromHexString(
                                "2A3CF32C0000000000000000000000000000000000000000000014E66318C6318C6318C6000000000000000000000000001F74A72493EEBDCC75463481B4E2D812C7090300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001")));
    }
    
    private static String argumentsToString(List<Object> args)
    {
        StringBuilder builder = new StringBuilder();
        for (Object arg : args)
        {
            Class<?> type = arg.getClass();

            if (builder.length() > 0)
                builder.append(",");

            if (type.isArray())
            {
                builder.append(Arrays.toString((byte[])arg));
            }
            else if (arg instanceof Hash)
            {
                builder.append(Arrays.toString(((Hash)arg).getBytes()));
            }
            else if (arg instanceof BigInteger)
            {
                builder.append(arg.toString());
            }
            else
            {
                builder.append(arg.toString());
            }
        }
        return builder.toString();
    }

    @ParameterizedTest
    @MethodSource(value = "functionValidTestData")
    public void whenEncodeFunctionExpectToEqual(Abi definition, String name, Object[] args, byte[] expectedResult) {
        // Execute
        byte[] actualResult = definition.encodeFunction(name, args);

        // Validate
        assertArrayEquals(expectedResult, actualResult);
    }
    
    @ParameterizedTest
    @MethodSource(value = "functionValidTestData")
    public void whenDecodeFunctionExpectToEqual(Abi definition, String name, Object[] expectedArgs, byte[] decoded) {
        // Execute
        List<Object> actualArgs = definition.decodeFunction(decoded);

        // Validate
        assertEquals(argumentsToString(Arrays.asList(expectedArgs)), argumentsToString(actualArgs));
    }
}
